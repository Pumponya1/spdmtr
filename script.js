const btn    = document.getElementById('measureBtn');
const needle = document.getElementById('needle');
const result = document.getElementById('result');
const music  = document.getElementById('bg-music');
const photo  = document.querySelector('.photo');
const labels = [...document.querySelectorAll('.label')];

const phrases = [
  '–õ—é–±–æ–≤—å –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç ‚ù§Ô∏è',
  '–û–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤ üî•',
  '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ üíã',
  '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å üòç',
  '–ú–∞–∫—Å–∏–º—É–º! –ë–æ–ª—å—à–µ –∏–∑–º–µ—Ä–∏—Ç—å –Ω–µ–ª—å–∑—è üöÄ',
  '–í–∞—à–∏ —Å–µ—Ä–¥—Ü–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 100% üíñ',
  'üî• –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –≤–∞—à–µ–π –ª—é–±–æ–≤—å—é',
];

let clicks = 0;
let resetTimer = null;
let animInstance = null;
let lastIdx = -1;

/* –£—Ç–∏–ª–∏—Ç—ã */
const toRad = deg => (deg * Math.PI) / 180;

/* –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø–æ –¥—É–≥–µ –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π */
function layoutLabels() {
  const cx = 100, cy = 110;   // —Ü–µ–Ω—Ç—Ä –¥—É–≥–∏ –≤–æ viewBox
  const r  = 78;              // —Ä–∞–¥–∏—É—Å –ø–æ–¥–ø–∏—Å–∏ (—á—É—Ç—å –º–µ–Ω—å—à–µ —Å–∞–º–æ–π –¥—É–≥–∏)
  labels.forEach(lbl => {
    const ang = parseFloat(lbl.getAttribute('data-angle')); // -90..90
    const x = cx + r * Math.cos(toRad(ang));
    const y = cy + r * Math.sin(toRad(ang));
    lbl.setAttribute('x', x.toFixed(2));
    lbl.setAttribute('y', y.toFixed(2));
    // –∫–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è –∫ –¥—É–≥–µ = —É–≥–æ–ª + 90 (–¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏)
    lbl.setAttribute('transform', `rotate(${ang}, ${x.toFixed(2)}, ${y.toFixed(2)})`);
  });
}

/* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —É–≥–ª—É —Å—Ç—Ä–µ–ª–∫–∏ */
function highlightByAngle(a) {
  const idx =
    a < -54 ? 0 :
    a < -18 ? 1 :
    a <  18 ? 2 :
    a <  54 ? 3 : 4;

  if (idx !== lastIdx) {
    labels.forEach((l,i) => l.classList.toggle('active', i === idx));
    if (labels[idx]) {
      labels[idx].classList.add('flash');
      setTimeout(() => labels[idx] && labels[idx].classList.remove('flash'), 450);
    }
    lastIdx = idx;
  }
}

/* –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ */
function resetGauge() {
  anime({
    targets: {angle: state.angle},
    angle: -90,
    duration: 1000,
    easing: 'easeInOutQuad',
    update: anim => {
      state.angle = anim.animations[0].currentValue;
      needle.style.transform = `rotate(${state.angle}deg)`;
      highlightByAngle(state.angle);
    },
    complete: () => {
      labels.forEach(l => l.classList.remove('active','flash'));
      result.textContent = '';
      btn.textContent = '–ò–∑–º–µ—Ä–∏—Ç—å –ª—é–±–æ–≤—å üíò';
    }
  });
}

/* –°–µ—Ä–¥–µ—á–∫–∏ */
function spawnHearts(count = 60) {
  for (let i = 0; i < count; i++) {
    const heart = document.createElement('div');
    heart.textContent = '‚ù§Ô∏è';
    heart.className = 'flying-heart';
    const startX = Math.random() * window.innerWidth;
    heart.style.left = `${startX}px`;
    heart.style.top  = `${window.innerHeight + 20}px`;
    document.body.appendChild(heart);

    anime({
      targets: heart,
      translateY: -window.innerHeight - 120,
      translateX: (Math.random() - 0.5) * 220,
      scale: Math.random() * 1.5 + 0.6,
      duration: 4200 + Math.random() * 2200,
      easing: 'easeOutCubic',
      complete: () => heart.remove()
    });
  }
}

/* –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≥–ª–∞ —Å—Ç—Ä–µ–ª–∫–∏ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö) */
const state = { angle: -90 };

/* –ó–∞–ø—É—Å–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–¥–ª–∏–Ω–Ω—ã–π ¬´—Ä–∞–∑–≥–æ–Ω¬ª) */
function measure() {
  clicks++;
  btn.disabled = true;
  result.textContent = '–ò–∑–º–µ—Ä—è—é‚Ä¶';
  music?.play().catch(()=>{});

  // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—à–ª—É—é –∞–Ω–∏–º–∞—Ü–∏—é/—Ç–∞–π–º–µ—Ä
  animInstance?.pause();
  if (resetTimer) { clearTimeout(resetTimer); resetTimer = null; }
  lastIdx = -1;

  const keyframes = [
    { value: -65,  duration: 700,  easing: 'easeInOutSine' },
    { value:  35,  duration: 900,  easing: 'easeInOutSine' },
    { value: -30,  duration: 900,  easing: 'easeInOutSine' },
    { value:  45,  duration: 800,  easing: 'easeInOutSine' },
    { value: -10,  duration: 700,  easing: 'easeInOutSine' },
    { value:  90,  duration: 2200, easing: 'easeOutElastic(1,.6)' },
  ];

  // –∞–Ω–∏–º–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏ —Å–∞–º–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç
  animInstance = anime({
    targets: state,
    angle: keyframes,
    update: () => {
      needle.style.transform = `rotate(${state.angle}deg)`;
      highlightByAngle(state.angle);
    },
    complete: () => {
      if (clicks > 3) result.textContent = '–≠–π, —Ö–≤–∞—Ç–∏—Ç, —É–∂–µ –∏ —Ç–∞–∫ –≤—Å—ë —è—Å–Ω–æ üòè';
      else result.textContent = phrases[Math.floor(Math.random()*phrases.length)];

      spawnHearts(60);
      btn.disabled = false;
      btn.textContent = '–ï—â—ë —Ä–∞–∑ üíû';

      resetTimer = setTimeout(resetGauge, 20000);
    }
  });
}

/* –ü–∞—Å—Ö–∞–ª–∫–∞: 3 –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ */
let secretClicks = 0, secretTO = null;
photo.addEventListener('click', () => {
  secretClicks++;
  clearTimeout(secretTO);
  secretTO = setTimeout(() => secretClicks = 0, 800);
  if (secretClicks >= 3) {
    spawnHearts(90);
    secretClicks = 0;
  }
});

/* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è */
layoutLabels();
btn.addEventListener('click', measure);
