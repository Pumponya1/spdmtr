// —ç–ª–µ–º–µ–Ω—Ç—ã
const btn    = document.getElementById('measureBtn');
const needle = document.getElementById('needle');
const result = document.getElementById('result');
const music  = document.getElementById('bg-music');
const photo  = document.querySelector('.photo');
const labels = [...document.querySelectorAll('.label')];

// —Å–æ—Å—Ç–æ—è–Ω–∏—è
const state = { angleTop: -90 }; // —É–≥–æ–ª –≤ —Å–∏—Å—Ç–µ–º–µ "–≤–µ—Ä—Ö = 0¬∞, –ª–µ–≤–æ = -90¬∞, –ø—Ä–∞–≤–æ = 90¬∞"
const labelAngles = [-72, -36, 0, 36, 72]; // —Ü–µ–ª–µ–≤—ã–µ —É–≥–ª—ã –ø–æ–¥–ø–∏—Å–µ–π

// —Ñ—Ä–∞–∑—ã
const phrases = [
  '–õ—é–±–æ–≤—å –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç ‚ù§Ô∏è',
  '–û–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤ üî•',
  '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ üíã',
  '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å üòç',
  '–ú–∞–∫—Å–∏–º—É–º! –ë–æ–ª—å—à–µ –∏–∑–º–µ—Ä–∏—Ç—å –Ω–µ–ª—å–∑—è üöÄ',
  '–í–∞—à–∏ —Å–µ—Ä–¥—Ü–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 100% üíñ',
  'üî• –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –≤–∞—à–µ–π –ª—é–±–æ–≤—å—é',
];

// –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
const toRad = d => (d * Math.PI) / 180;
function placeLabels() {
  const cx = 100, cy = 110, r = 78; // —Ü–µ–Ω—Ç—Ä –∏ —Ä–∞–¥–∏—É—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
  labels.forEach((lbl, i) => {
    const aTop = labelAngles[i];                      // -90..90 (0 = –≤–µ—Ä—Ö)
    const theta = toRad(90 - aTop);                   // –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É cos/sin (0 = –≤–ø—Ä–∞–≤–æ)
    const x = cx + r * Math.cos(theta);
    const y = cy - r * Math.sin(theta);               // –º–∏–Ω—É—Å, –ø–æ—Ç–æ–º—É —á—Ç–æ y –≤ SVG –≤–Ω–∏–∑
    lbl.setAttribute('x', x.toFixed(2));
    lbl.setAttribute('y', y.toFixed(2));
    // –ø–æ–≤–æ—Ä–æ—Ç –ø–æ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –∫ –¥—É–≥–µ
    lbl.setAttribute('transform', `rotate(${aTop} ${x.toFixed(2)} ${y.toFixed(2)})`);
  });
}
placeLabels();

// –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ–¥–ø–∏—Å–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —É–≥–ª—É
let lastIdx = -1;
function highlightByAngle(aTop) {
  // –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ü–µ–ª–µ–≤–æ–π —É–≥–æ–ª
  let idx = 0, best = Infinity;
  for (let i = 0; i < labelAngles.length; i++) {
    const d = Math.abs(aTop - labelAngles[i]);
    if (d < best) { best = d; idx = i; }
  }
  if (idx !== lastIdx) {
    labels.forEach((l, i) => l.classList.toggle('active', i === idx));
    labels[idx].classList.add('flash');
    setTimeout(() => labels[idx].classList.remove('flash'), 450);
    lastIdx = idx;
  }
}

// –ø—Ä–∏–º–µ–Ω–∏—Ç—å —É–≥–æ–ª –∫ —Å—Ç—Ä–µ–ª–∫–µ (—Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ 100,110)
function applyNeedle() {
  needle.setAttribute('transform', `rotate(${state.angleTop},100,110)`);
  highlightByAngle(state.angleTop);
}

// —Å–µ—Ä–¥–µ—á–∫–∏ ‚Äî –ø–ª–∞–≤–Ω–æ –∏ –º–Ω–æ–≥–æ, –±–µ–∑ ¬´–¥—ë—Ä–≥–∞–Ω–∏–π¬ª
function spawnHearts(count = 80) {
  for (let i = 0; i < count; i++) {
    const h = document.createElement('div');
    h.textContent = '‚ù§Ô∏è';
    h.className = 'flying-heart';
    const startX = Math.random() * window.innerWidth;
    h.style.left = `${startX}px`;
    h.style.top  = `${window.innerHeight + 20}px`;
    document.body.appendChild(h);

    anime({
      targets: h,
      translateY: -window.innerHeight - 120,
      translateX: (Math.random() - 0.5) * 220,
      scale: Math.random() * 1.5 + 0.6,
      duration: 4200 + Math.random() * 2200,
      easing: 'linear', // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–ª–∞–≤–Ω–æ
      complete: () => h.remove()
    });
  }
}

// –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è (6‚Äì7 —Å–µ–∫ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–π ‚Üí —Ä—ã–≤–æ–∫)
let clicks = 0;
let resetTimer = null;
function measure() {
  clicks++;
  result.textContent = '–ò–∑–º–µ—Ä—è—é‚Ä¶';
  music?.play().catch(()=>{});
  if (resetTimer) { clearTimeout(resetTimer); resetTimer = null; }

  anime({
    targets: state,
    angleTop: [
      { value: -65, duration: 900,  easing: 'easeInOutSine' },
      { value:  35, duration: 1100, easing: 'easeInOutSine' },
      { value: -25, duration: 1100, easing: 'easeInOutSine' },
      { value:  45, duration: 900,  easing: 'easeInOutSine' },
      { value: -10, duration: 800,  easing: 'easeInOutSine' },
      { value:  90, duration: 2200, easing: 'easeOutElastic(1,.6)' }
    ],
    update: applyNeedle,
    complete: () => {
      result.textContent = (clicks > 3)
        ? '–≠–π, —Ö–≤–∞—Ç–∏—Ç, —É–∂–µ –∏ —Ç–∞–∫ –≤—Å—ë —è—Å–Ω–æ üòè'
        : phrases[Math.floor(Math.random()*phrases.length)];
      spawnHearts(90);
      resetTimer = setTimeout(() => {
        anime({
          targets: state,
          angleTop: -90,
          duration: 1000,
          easing: 'easeInOutQuad',
          update: applyNeedle,
          complete: () => { labels.forEach(l => l.classList.remove('active')); result.textContent=''; }
        });
      }, 20000);
    }
  });
}

// –ø–∞—Å—Ö–∞–ª–∫–∞: 3 –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ
let secret = 0, secretTO = null;
photo.addEventListener('click', () => {
  secret++; clearTimeout(secretTO);
  secretTO = setTimeout(()=> secret = 0, 800);
  if (secret >= 3) { spawnHearts(120); secret = 0; }
});

// —Å—Ç–∞—Ä—Ç
applyNeedle();
btn.addEventListener('click', measure);
